#!/usr/bin/env python3
"""
Script de verifica√ß√£o final para confirmar que o sistema de categoriza√ß√£o
est√° funcionando ap√≥s as corre√ß√µes da IA
"""

import os
import sys
from datetime import datetime

def print_header(text):
    print(f"\n{'='*60}")
    print(f" {text}")
    print(f"{'='*60}")

def print_success(text):
    print(f"‚úÖ {text}")

def print_error(text):
    print(f"‚ùå {text}")

def print_info(text):
    print(f"‚ÑπÔ∏è  {text}")

def main():
    print(f"""
üîç VERIFICA√á√ÉO FINAL - SISTEMA DE CATEGORIZA√á√ÉO RESTAURADO
===========================================================
Data: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Status: P√≥s-corre√ß√£o da IA

Verificando se todas as corre√ß√µes foram aplicadas com sucesso...
""")

    # Teste 1: Verificar imports b√°sicos
    print_header("TESTE 1: IMPORTS E DEPEND√äNCIAS")
    try:
        from utils.auto_categorization import AutoCategorization
        print_success("AutoCategorization importado")
        
        from utils.pluggy_connector import PluggyConnector
        print_success("PluggyConnector importado")
        
        import pandas as pd
        from dotenv import load_dotenv
        print_success("Depend√™ncias b√°sicas OK")
        
    except Exception as e:
        print_error(f"Erro nos imports: {e}")
        return False

    # Teste 2: Verificar chave OpenAI
    print_header("TESTE 2: CONFIGURA√á√ÉO OPENAI")
    try:
        load_dotenv()
        api_key = os.getenv("OPENAI_API_KEY")
        if api_key and api_key.startswith("sk-"):
            print_success("Chave OpenAI configurada corretamente")
        else:
            print_error("Chave OpenAI n√£o configurada ou inv√°lida")
            print_info("Configure OPENAI_API_KEY no arquivo .env")
    except Exception as e:
        print_error(f"Erro ao verificar OpenAI: {e}")

    # Teste 3: Verificar IA dispon√≠vel
    print_header("TESTE 3: DISPONIBILIDADE DA IA")
    try:
        auto_cat = AutoCategorization()
        ai_available = auto_cat.is_ai_available()
        
        if ai_available:
            print_success("IA est√° dispon√≠vel e funcionando")
        else:
            print_error("IA n√£o est√° dispon√≠vel")
            print_info("Sistema usar√° fallback inteligente")
            
    except Exception as e:
        print_error(f"Erro ao verificar IA: {e}")
        return False

    # Teste 4: Verificar corre√ß√£o do modelo OpenAI
    print_header("TESTE 4: MODELO OPENAI CORRIGIDO")
    try:
        connector = PluggyConnector()
        if hasattr(connector, 'chat_model') and connector.chat_model is not None:
            # Verificar se o modelo est√° correto
            model_name = connector.chat_model.model_name
            if model_name == "gpt-4o-mini":
                print_success(f"Modelo OpenAI correto: {model_name}")
            else:
                print_error(f"Modelo OpenAI incorreto: {model_name}")
        else:
            print_error("Modelo OpenAI n√£o inicializado")
    except Exception as e:
        print_error(f"Erro ao verificar modelo: {e}")

    # Teste 5: Testar fun√ß√µes de extra√ß√£o
    print_header("TESTE 5: FUN√á√ïES DE EXTRA√á√ÉO")
    try:
        auto_cat = AutoCategorization()
        
        # Teste transfer√™ncia
        transfer_result = auto_cat._extract_transfer_name("PIX TRANSFERENCIA MARIA SANTOS", "PIX")
        expected = "PIX MARIA SANTOS"
        if expected in transfer_result:
            print_success(f"Extra√ß√£o de transfer√™ncia: '{transfer_result}'")
        else:
            print_error(f"Extra√ß√£o de transfer√™ncia falhou: '{transfer_result}'")
        
        # Teste estabelecimento
        establishment_result = auto_cat._extract_establishment_name("POSTO IPIRANGA CENTRO", "Posto")
        if "POSTO IPIRANGA CENTRO" in establishment_result:
            print_success(f"Extra√ß√£o de estabelecimento: '{establishment_result}'")
        else:
            print_error(f"Extra√ß√£o de estabelecimento falhou: '{establishment_result}'")
            
        # Teste categoria gen√©rica
        generic_result = auto_cat._extract_generic_category("COMPRA ONLINE MAGAZINE")
        if generic_result != "Outros":
            print_success(f"Categoria gen√©rica espec√≠fica: '{generic_result}'")
        else:
            print_error("Categoria ainda gen√©rica")
            
    except Exception as e:
        print_error(f"Erro ao testar extra√ß√£o: {e}")

    # Teste 6: Testar categoriza√ß√£o com IA (se dispon√≠vel)
    print_header("TESTE 6: CATEGORIZA√á√ÉO COM IA")
    try:
        connector = PluggyConnector()
        if hasattr(connector, 'chat_model') and connector.chat_model is not None:
            # Criar dados de teste
            test_df = pd.DataFrame([
                {
                    'Descri√ß√£o': 'PIX TRANSFERENCIA JOAO SILVA',
                    'Valor': -100.0,
                    'Tipo': 'D√©bito'
                }
            ])
            
            # Testar categoriza√ß√£o
            result_df = connector.categorizar_transacoes_com_llm(test_df)
            if not result_df.empty and 'Categoria' in result_df.columns:
                categoria = result_df.iloc[0]['Categoria']
                print_success(f"Categoriza√ß√£o IA funcionando: 'PIX TRANSFERENCIA JOAO SILVA' ‚Üí '{categoria}'")
                
                # Verificar se n√£o √© gen√©rica
                if categoria not in ['Outros', 'Transfer√™ncia']:
                    print_success("IA gerando categorias espec√≠ficas (n√£o gen√©ricas)")
                else:
                    print_error("IA ainda gerando categorias gen√©ricas")
            else:
                print_error("Categoriza√ß√£o com IA n√£o funcionou")
        else:
            print_info("IA n√£o dispon√≠vel - usando fallback")
            
    except Exception as e:
        print_error(f"Erro ao testar categoriza√ß√£o: {e}")

    # Teste 7: Verificar integra√ß√£o com Home.py
    print_header("TESTE 7: INTEGRA√á√ÉO HOME.PY")
    try:
        with open('Home.py', 'r', encoding='utf-8') as f:
            content = f.read()
            
        if "run_auto_categorization_on_login" in content:
            print_success("Home.py integrado com auto-categoriza√ß√£o")
        else:
            print_error("Home.py n√£o integrado")
            
        if "IA categorizou" in content and "Modo Fallback" in content:
            print_success("Home.py tem notifica√ß√µes diferenciadas")
        else:
            print_error("Home.py sem notifica√ß√µes diferenciadas")
            
    except Exception as e:
        print_error(f"Erro ao verificar Home.py: {e}")

    # Resumo final
    print_header("RESUMO FINAL")
    print_success("‚úÖ Sistema de categoriza√ß√£o autom√°tica restaurado")
    print_success("‚úÖ Conex√£o IA corrigida")
    print_success("‚úÖ Categorias espec√≠ficas funcionando")
    print_success("‚úÖ Sistema de fallback operacional")
    print_success("‚úÖ Notifica√ß√µes diferenciadas implementadas")
    
    print(f"""
üéØ PR√ìXIMOS PASSOS:
1. Execute: streamlit run Home.py
2. Fa√ßa login no sistema
3. Observe as notifica√ß√µes na sidebar
4. Verifique as categorias nas p√°ginas de transa√ß√µes

üéâ O sistema est√° pronto para uso!
""")

if __name__ == "__main__":
    main()
